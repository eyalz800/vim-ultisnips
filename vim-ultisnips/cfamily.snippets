snippet main "int main() {}"
int main()
{
	${VISUAL}$0
}
endsnippet

snippet mainp "#include <iostream> int main() {}"
#include <iostream>

int main()
{
	${VISUAL}$0
}
endsnippet

snippet hg "#ifndef...#define...#endif"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	snip.rv = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}$0

#endif // $1
endsnippet

snippet extc "extern C { ... }"
extern "C"
{

${VISUAL}$0

}
endsnippet

snippet extcif "#ifdef __cplusplus...extern C"
#ifdef __cplusplus
extern "C"
{
#endif

${VISUAL}$0

#ifdef __cplusplus
} // extern "C"
#endif
endsnippet

snippet ns "namespace { ... }"
namespace ${1:name}
{

${VISUAL}$0

} // $1
endsnippet

snippet doc "/** doc */"
/**
 * ${0}
 */
endsnippet

snippet docs "/** doc @{ */"
/**
 * ${0}
 * @{
 */
endsnippet

snippet doce "/** @} */"
/**
 * @}
 */
endsnippet

snippet inc "#include <...>"
#include <${0}>
endsnippet

snippet incl "#include ..."
#include "${0}"
endsnippet

snippet imp "import module;"
import ${0:module};
endsnippet

snippet try "try { ... } catch (/* exception */) { ... }"
try {
	${VISUAL}$0
} catch (${1:/* exception */}) {
	${2:/* catch */}
}
endsnippet

snippet if "if (/*condition*/) { ... }"
if (${1:condition}) {
	${VISUAL}$0
}
endsnippet

snippet ife "if (/*condition*/) { ... } else { ... }"
if (${1:condition}) {
	${VISUAL}$0
} else {
	${2:/* else */}
}
endsnippet

snippet ifc "if constexpr (/*condition*/) { ... }"
if constexpr (${1:condition}) {
	${VISUAL}$0
}
endsnippet

snippet ifce "if constexpr (/*condition*/) { ... } else { ... }"
if constexpr (${1:condition}) {
	${VISUAL}$0
} else {
	${2:/* else */}
}
endsnippet

snippet fora "for (auto & {} : {}) { ... }"
for (auto ${1:item} : ${2:container}) {
	${VISUAL}$0
}
endsnippet

snippet for "for (auto {} = {}; {} < {}; ++{}) { ... }"
for (auto ${1:it} = ${2:begin}; $1 < ${3:end}; ++$1) {
	${VISUAL}$0
}
endsnippet

snippet forr "for (auto {} = {}; {} > {}; --{}) { ... }"
for (auto ${1:it} = ${2:end}; $1 > ${3:begin}; --$1) {
	${VISUAL}$0
}
endsnippet

snippet fori "for (auto i = {}; i < {}; ++i) { ... }"
for (auto i = ${1:begin}; i < ${2:end}; ++i) {
	${VISUAL}$0
}
endsnippet

snippet forir "for (auto i = {}; i > {}; --i) { ... }"
for (auto i = ${1:end}; i > ${2:begin}; --i) {
	${VISUAL}$0
}
endsnippet

snippet scast "static_cast<{}>({})"
static_cast<${1}>(${2})
endsnippet

snippet rcast "reinterpret_cast<{}>({})"
reinterpret_cast<${1}>(${2})
endsnippet

snippet dcast "dynamic_cast<{}>({})"
dynamic_cast<${1}>(${2})
endsnippet

snippet ccast "const_cast<{}>({})"
const_cast<${1}>(${2})
endsnippet

snippet class "class {};"
class ${1:name}
{
	${VISUAL}$0
};
endsnippet

snippet struct "struct {};"
struct ${1:name}
{
	${VISUAL}$0
};
endsnippet

snippet enum "enum {};"
enum ${1:name}
{
	${VISUAL}$0
};
endsnippet

snippet enumc "enum class {};"
enum class ${1:name}
{
	${VISUAL}$0
};
endsnippet
